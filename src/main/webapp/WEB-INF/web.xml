<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
            http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	version="3.1">

	<!-- Declaring our Spring servlet, calling it matrimonial. Spring will look 
		for a matrimonial-servlet.xml file in the WEB-INF folder -->
	<servlet>
		<servlet-name>matrimonial</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- matrimonial is the default servlet, it'll be responsible for handling 
		all requests including static content -->
	<servlet-mapping>
		<servlet-name>matrimonial</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
               \WEB-INF\persistence-context.xml
               \WEB-INF\service-context.xml
            </param-value>
	</context-param>

	<!-- When initialising the web application context, ContextLoaderListener 
		reads the spring configuration file (with value given against contextConfigLocation -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- This is a special servlet filter which delegates to an implementation 
		of javax.servlet.Filter that's registered as a bean in the Spring application 
		context. The name here is very significant 
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter> -->
</web-app>